package gov.nasa.jpf.star.examples.rbt;

import gov.nasa.jpf.star.examples.rbt.TreeMap.Entry;
import org.junit.Test;
import gov.nasa.jpf.util.test.TestJPF;

public class TreeMap_remove1 extends TestJPF {

	@Test
	public void test1() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = null;
		obj.size = 0;
		int key = 0;
		obj.modCount = 0;
		obj.remove(key);
	}

	@Test
	public void test2() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry right_4 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = 0;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test3() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry parent_27 = obj.root;
		Entry right_299 = right_4;
		Entry right_302 = right_4;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key_300 = 0;
		int key = 0;
		int key_23 = 1;
		int key_1 = 0;
		int key_301 = 1;
		int key_303 = 1;
		boolean color_28 = false;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test4() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry right_16 = null;
		Entry left_15 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test5() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry right_16 = null;
		Entry parent_67 = left_3;
		Entry left_299 = left_15;
		Entry left_301 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = -2;
		int key_63 = -2;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_302 = -2;
		int key_303 = -1;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test6() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_57 = left_3;
		Entry parent_67 = left_3;
		Entry right_299 = right_16;
		Entry right_302 = right_16;
		Entry left_305 = left_15;
		Entry left_307 = left_15;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 5;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -3;
		int key = 0;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_300 = -2;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -1;
		int key_308 = -3;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		Object value_54 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test7() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry right_304 = right_26;
		Entry right_307 = right_26;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 4;
		int key_306 = 2;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 2;
		int key_303 = 0;
		int key_302 = -1;
		boolean color_28 = true;
		int key_305 = 1;
		int key_300 = -1;
		boolean color_48 = false;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_308 = 2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test8() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_4 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key_300 = -1;
		int key = 0;
		boolean color_18 = false;
		int key_1 = 0;
		int key_13 = -1;
		int key_303 = 0;
		int key_302 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test9() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key_300 = -1;
		int key = 0;
		boolean color_18 = false;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		int key_302 = -1;
		int key_303 = 0;
		boolean color_28 = false;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test10() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry left_3 = null;
		Entry right_4 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = 1;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test11() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = -1;
		boolean color_18 = true;
		int key_23 = 1;
		int key_1 = 0;
		int key_13 = -1;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test12() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry right_299 = right_26;
		Entry right_302 = right_26;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = 0;
		boolean color_48 = false;
		int key = -2;
		int key_43 = 1;
		boolean color_18 = true;
		int key_1 = -1;
		int key_13 = -2;
		int key_23 = 0;
		boolean color_28 = true;
		int key_301 = 1;
		int key_303 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test13() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry right_26 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry parent_47 = right_4;
		Entry left_299 = left_25;
		Entry left_302 = left_25;
		Entry right_305 = right_26;
		Entry right_308 = right_26;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_45 = null;
		Entry right_46 = null;
		obj.size = 5;
		int key_309 = 1;
		int key_306 = 0;
		boolean color_6 = true;
		int key = -3;
		int key_43 = 1;
		int key_307 = 1;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_33 = -1;
		int key_300 = -2;
		boolean color_48 = false;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_13 = -3;
		int key_301 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_24 = null;
		Object value_34 = null;
		Object value_44 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		obj.remove(key);
	}

	@Test
	public void test14() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry parent_57 = left_3;
		Entry right_300 = right_16;
		Entry right_303 = right_16;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_426 = null;
		Entry right_424 = null;
		int key_299 = 0;
		int key_423 = 1;
		obj.size = 4;
		boolean color_427 = true;
		int key_304 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = -2;
		boolean color_18 = true;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -2;
		int key_302 = -1;
		int key_305 = 0;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_428 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_423;
		right_4.value = value_428;
		right_4.left = left_426;
		right_4.right = right_424;
		right_4.parent = obj.root;
		right_4.color = color_427;
		obj.remove(key);
	}

	@Test
	public void test15() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry right_16 = null;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_423 = null;
		Entry right_421 = null;
		int key_420 = 2;
		obj.size = 4;
		boolean color_424 = true;
		int key_304 = 0;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = -1;
		int key_303 = -1;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_64 = null;
		Object value_425 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_420;
		right_4.value = value_425;
		right_4.left = left_423;
		right_4.right = right_421;
		right_4.parent = obj.root;
		right_4.color = color_424;
		obj.remove(key);
	}

	@Test
	public void test16() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry left_300 = left_3;
		Entry right_16 = null;
		Entry left_385 = null;
		Entry right_383 = null;
		boolean color_386 = true;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 1;
		int key_301 = 1;
		int key_302 = 2;
		int key_382 = 3;
		int key_299 = 2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_387 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_382;
		right_4.value = value_387;
		right_4.left = left_385;
		right_4.right = right_383;
		right_4.parent = obj.root;
		right_4.color = color_386;
		obj.remove(key);
	}

	@Test
	public void test17() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_300 = left_3;
		Entry right_16 = null;
		Entry left_420 = null;
		Entry right_418 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_63 = -1;
		boolean color_421 = true;
		int key = -1;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = 0;
		int key_302 = 1;
		int key_417 = 2;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_64 = null;
		Object value_422 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_417;
		right_4.value = value_422;
		right_4.left = left_420;
		right_4.right = right_418;
		right_4.parent = obj.root;
		right_4.color = color_421;
		obj.remove(key);
	}

	@Test
	public void test18() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry left_65 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_16 = null;
		Entry right_66 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		obj.size = 4;
		boolean color_425 = true;
		int key_304 = 1;
		boolean color_6 = true;
		int key_63 = 1;
		int key = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 3;
		int key_13 = 2;
		int key_301 = 2;
		int key_302 = 3;
		int key_421 = 4;
		int key_305 = 2;
		int key_299 = 3;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_64 = null;
		Object value_426 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_421;
		right_4.value = value_426;
		right_4.left = left_424;
		right_4.right = right_422;
		right_4.parent = obj.root;
		right_4.color = color_425;
		obj.remove(key);
	}

	@Test
	public void test19() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_67 = left_3;
		Entry right_66 = null;
		Entry left_300 = left_3;
		Entry left_303 = left_15;
		Entry right_16 = null;
		Entry left_65 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -2;
		boolean color_6 = true;
		int key_63 = -2;
		int key = -1;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = 0;
		int key_301 = 0;
		int key_302 = 1;
		int key_418 = 2;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_64 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test20() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_300 = left_3;
		Entry left_15 = null;
		Entry left_382 = null;
		Entry right_380 = null;
		obj.size = 3;
		boolean color_383 = true;
		boolean color_6 = true;
		int key = 0;
		int key_379 = 2;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = -1;
		int key_301 = -1;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_384 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_4.key = key_379;
		right_4.value = value_384;
		right_4.left = left_382;
		right_4.right = right_380;
		right_4.parent = obj.root;
		right_4.color = color_383;
		obj.remove(key);
	}

	@Test
	public void test21() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_15 = null;
		Entry left_415 = null;
		Entry right_413 = null;
		int key_299 = 0;
		obj.size = 4;
		boolean color_58 = false;
		boolean color_6 = true;
		boolean color_416 = true;
		int key = -1;
		boolean color_18 = true;
		int key_1 = 0;
		int key_13 = -2;
		int key_53 = -1;
		int key_412 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_417 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_412;
		right_4.value = value_417;
		right_4.left = left_415;
		right_4.right = right_413;
		right_4.parent = obj.root;
		right_4.color = color_416;
		obj.remove(key);
	}

	@Test
	public void test22() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry parent_67 = left_3;
		Entry left_300 = left_15;
		Entry left_302 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		Entry left_455 = null;
		Entry right_453 = null;
		obj.size = 5;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 1;
		int key_452 = 3;
		int key_303 = -1;
		boolean color_456 = true;
		int key_304 = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = 0;
		int key_53 = 1;
		int key_301 = -1;
		int key_299 = 2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_64 = null;
		Object value_457 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		right_4.key = key_452;
		right_4.value = value_457;
		right_4.left = left_455;
		right_4.right = right_453;
		right_4.parent = obj.root;
		right_4.color = color_456;
		obj.remove(key);
	}

	@Test
	public void test23() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry left_55 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_15 = null;
		Entry right_56 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = 2;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 2;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 2;
		int key_13 = -1;
		int key_53 = 1;
		int key_301 = -1;
		int key_303 = 1;
		int key_418 = 3;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test24() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry right_56 = null;
		Entry left_300 = left_3;
		Entry right_302 = right_16;
		Entry left_15 = null;
		Entry left_55 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = 1;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_1 = 1;
		int key_13 = -2;
		int key_53 = -1;
		int key_301 = -2;
		int key_303 = -2;
		int key_418 = 2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		right_4.key = key_418;
		right_4.value = value_423;
		right_4.left = left_421;
		right_4.right = right_419;
		right_4.parent = obj.root;
		right_4.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test25() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry right_16 = null;
		Entry right_4 = null;
		obj.size = 2;
		boolean color_18 = false;
		int key_1 = 1;
		int key_13 = 0;
		boolean color_6 = true;
		int key = 0;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test26() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry left_15 = null;
		Entry left_300 = left_3;
		Entry right_4 = null;
		Entry right_16 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = false;
		int key_1 = 2;
		int key_13 = 1;
		int key_301 = 1;
		int key_302 = 2;
		int key_299 = 2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test27() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_300 = left_3;
		Entry right_4 = null;
		Entry left_15 = null;
		obj.size = 2;
		boolean color_18 = false;
		int key_1 = 1;
		int key_13 = -1;
		boolean color_6 = true;
		int key_301 = -1;
		int key = 0;
		int key_299 = 1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test28() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry parent_5 = null;
		Entry right_4 = null;
		Entry left_3 = null;
		boolean color_6 = true;
		obj.size = 1;
		int key = 0;
		int key_1 = -1;
		int key_299 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		obj.remove(key);
	}

	@Test
	public void test29() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry left_15 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test30() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry right_16 = null;
		Entry parent_67 = left_3;
		Entry left_299 = left_15;
		Entry left_301 = left_15;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_300 = -1;
		int key_63 = -1;
		int key = 2;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 2;
		int key_1 = 1;
		int key_13 = 0;
		int key_302 = -1;
		int key_303 = 0;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_14 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test31() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry right_16 = new Entry();
		Entry left_15 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry parent_57 = left_3;
		Entry parent_67 = left_3;
		Entry right_299 = right_16;
		Entry right_302 = right_16;
		Entry left_305 = left_15;
		Entry left_307 = left_15;
		Entry left_55 = null;
		Entry right_56 = null;
		Entry left_65 = null;
		Entry right_66 = null;
		obj.size = 5;
		int key_309 = 0;
		int key_306 = -1;
		boolean color_58 = false;
		boolean color_6 = true;
		int key_63 = -1;
		int key = 3;
		int key_303 = 1;
		boolean color_28 = true;
		int key_304 = 2;
		int key_300 = 0;
		boolean color_68 = false;
		boolean color_18 = true;
		int key_23 = 3;
		int key_1 = 2;
		int key_13 = 0;
		int key_53 = 1;
		int key_301 = 1;
		int key_308 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_14 = null;
		Object value_54 = null;
		Object value_64 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		right_16.key = key_53;
		right_16.value = value_54;
		right_16.left = left_55;
		right_16.right = right_56;
		right_16.parent = parent_57;
		right_16.color = color_58;
		left_15.key = key_63;
		left_15.value = value_64;
		left_15.left = left_65;
		left_15.right = right_66;
		left_15.parent = parent_67;
		left_15.color = color_68;
		obj.remove(key);
	}

	@Test
	public void test32() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry parent_47 = right_4;
		Entry parent_17 = obj.root;
		Entry right_299 = right_26;
		Entry right_302 = right_26;
		Entry left_304 = left_3;
		Entry left_306 = left_3;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key = 0;
		int key_43 = 1;
		int key_307 = -2;
		int key_303 = 1;
		boolean color_28 = true;
		int key_305 = -2;
		int key_300 = 0;
		boolean color_48 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		int key_301 = 1;
		int key_308 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_44 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test33() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry left_299 = left_25;
		Entry left_302 = left_25;
		Entry left_305 = left_3;
		Entry left_307 = left_3;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 4;
		int key_309 = -2;
		int key_306 = -3;
		boolean color_6 = true;
		int key = 0;
		int key_303 = -1;
		boolean color_28 = true;
		int key_304 = 0;
		int key_33 = -1;
		int key_300 = -2;
		boolean color_38 = false;
		boolean color_18 = true;
		int key_23 = 0;
		int key_1 = -2;
		int key_13 = -3;
		int key_301 = -1;
		int key_308 = -3;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_34 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test34() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_300 = right_4;
		Entry right_26 = null;
		Entry left_382 = null;
		Entry right_380 = null;
		obj.size = 3;
		boolean color_383 = true;
		boolean color_6 = true;
		int key = 0;
		int key_379 = -2;
		int key_23 = 1;
		int key_1 = -1;
		int key_301 = 1;
		boolean color_28 = true;
		int key_299 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_384 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_379;
		left_3.value = value_384;
		left_3.left = left_382;
		left_3.right = right_380;
		left_3.parent = obj.root;
		left_3.color = color_383;
		obj.remove(key);
	}

	@Test
	public void test35() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry right_300 = right_4;
		Entry right_26 = null;
		Entry left_417 = null;
		Entry right_415 = null;
		obj.size = 4;
		boolean color_6 = true;
		int key_33 = -1;
		int key = -1;
		boolean color_38 = false;
		int key_414 = -3;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = 0;
		boolean color_28 = true;
		boolean color_418 = true;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_34 = null;
		Object value_419 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_414;
		left_3.value = value_419;
		left_3.left = left_417;
		left_3.right = right_415;
		left_3.parent = obj.root;
		left_3.color = color_418;
		obj.remove(key);
	}

	@Test
	public void test36() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry left_35 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_26 = null;
		Entry right_36 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = -3;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 0;
		boolean color_6 = true;
		int key_33 = -1;
		int key = -2;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_303 = -1;
		int key_418 = -4;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_34 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test37() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_37 = right_4;
		Entry right_36 = null;
		Entry right_300 = right_4;
		Entry left_302 = left_25;
		Entry right_26 = null;
		Entry left_35 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		int key_299 = -3;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = -2;
		boolean color_6 = true;
		int key_33 = -2;
		int key = -1;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -3;
		int key_301 = 0;
		int key_303 = -3;
		int key_418 = -4;
		boolean color_28 = true;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_34 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test38() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry right_26 = null;
		Entry right_300 = right_4;
		Entry left_25 = null;
		Entry left_385 = null;
		Entry right_383 = null;
		boolean color_386 = true;
		obj.size = 3;
		boolean color_6 = true;
		int key = 0;
		int key_23 = -1;
		int key_1 = -2;
		int key_301 = -2;
		int key_382 = -3;
		int key_302 = -1;
		boolean color_28 = true;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_387 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_382;
		left_3.value = value_387;
		left_3.left = left_385;
		left_3.right = right_383;
		left_3.parent = obj.root;
		left_3.color = color_386;
		obj.remove(key);
	}

	@Test
	public void test39() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry left_25 = null;
		Entry left_415 = null;
		Entry right_413 = null;
		obj.size = 4;
		boolean color_6 = true;
		boolean color_416 = true;
		boolean color_48 = false;
		int key = 0;
		int key_43 = 0;
		int key_23 = -1;
		int key_1 = -2;
		boolean color_28 = true;
		int key_412 = -3;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_44 = null;
		Object value_417 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_412;
		left_3.value = value_417;
		left_3.left = left_415;
		left_3.right = right_413;
		left_3.parent = obj.root;
		left_3.color = color_416;
		obj.remove(key);
	}

	@Test
	public void test40() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_25 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_46 = null;
		Entry parent_37 = right_4;
		Entry left_300 = left_25;
		Entry left_303 = left_25;
		Entry left_35 = null;
		Entry right_36 = null;
		Entry left_458 = null;
		Entry right_456 = null;
		obj.size = 5;
		boolean color_6 = true;
		int key = 1;
		int key_43 = 1;
		int key_302 = -1;
		boolean color_28 = true;
		int key_305 = 0;
		int key_455 = -3;
		boolean color_459 = true;
		int key_304 = -1;
		int key_33 = -1;
		boolean color_48 = false;
		boolean color_38 = false;
		int key_23 = 0;
		int key_1 = -2;
		int key_301 = -2;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_44 = null;
		Object value_34 = null;
		Object value_460 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_25.key = key_33;
		left_25.value = value_34;
		left_25.left = left_35;
		left_25.right = right_36;
		left_25.parent = parent_37;
		left_25.color = color_38;
		left_3.key = key_455;
		left_3.value = value_460;
		left_3.left = left_458;
		left_3.right = right_456;
		left_3.parent = obj.root;
		left_3.color = color_459;
		obj.remove(key);
	}

	@Test
	public void test41() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry left_45 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_25 = null;
		Entry right_46 = null;
		Entry left_421 = null;
		Entry right_419 = null;
		obj.size = 4;
		boolean color_422 = true;
		int key_304 = 2;
		boolean color_6 = true;
		boolean color_48 = false;
		int key = 1;
		int key_43 = 2;
		int key_23 = 0;
		int key_1 = -1;
		int key_301 = -1;
		int key_302 = 0;
		int key_418 = -2;
		boolean color_28 = true;
		int key_299 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_44 = null;
		Object value_423 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_418;
		left_3.value = value_423;
		left_3.left = left_421;
		left_3.right = right_419;
		left_3.parent = obj.root;
		left_3.color = color_422;
		obj.remove(key);
	}

	@Test
	public void test42() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry right_26 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry parent_47 = right_4;
		Entry right_46 = null;
		Entry right_300 = right_4;
		Entry right_303 = right_26;
		Entry left_25 = null;
		Entry left_45 = null;
		Entry left_424 = null;
		Entry right_422 = null;
		obj.size = 4;
		boolean color_425 = true;
		int key_304 = -2;
		boolean color_6 = true;
		boolean color_48 = false;
		int key = 0;
		int key_43 = -1;
		int key_23 = -2;
		int key_1 = -3;
		int key_301 = -3;
		int key_421 = -4;
		int key_302 = -2;
		boolean color_28 = true;
		int key_305 = -1;
		int key_299 = -3;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_44 = null;
		Object value_426 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		right_26.key = key_43;
		right_26.value = value_44;
		right_26.left = left_45;
		right_26.right = right_46;
		right_26.parent = parent_47;
		right_26.color = color_48;
		left_3.key = key_421;
		left_3.value = value_426;
		left_3.left = left_424;
		left_3.right = right_422;
		left_3.parent = obj.root;
		left_3.color = color_425;
		obj.remove(key);
	}

	@Test
	public void test43() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry left_3 = null;
		obj.size = 2;
		int key_1 = -1;
		int key_23 = 0;
		boolean color_6 = true;
		boolean color_28 = false;
		int key = 0;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test44() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry left_3 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_26 = null;
		Entry parent_17 = obj.root;
		Entry left_299 = left_3;
		Entry left_301 = left_3;
		Entry left_15 = null;
		Entry right_16 = null;
		obj.size = 3;
		boolean color_6 = true;
		int key_300 = -2;
		int key = 0;
		boolean color_18 = false;
		int key_23 = 0;
		int key_1 = -1;
		int key_13 = -2;
		int key_302 = -2;
		int key_303 = -1;
		boolean color_28 = false;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		Object value_14 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		left_3.key = key_13;
		left_3.value = value_14;
		left_3.left = left_15;
		left_3.right = right_16;
		left_3.parent = parent_17;
		left_3.color = color_18;
		obj.remove(key);
	}

	@Test
	public void test45() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry left_25 = null;
		Entry right_300 = right_4;
		Entry left_3 = null;
		Entry right_26 = null;
		obj.size = 2;
		int key_1 = -1;
		int key_23 = 1;
		int key_301 = 1;
		boolean color_6 = true;
		boolean color_28 = false;
		int key = 0;
		int key_299 = -1;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

	@Test
	public void test46() throws Exception {
		TreeMap obj = new TreeMap();
		obj.root = new Entry();
		Entry right_4 = new Entry();
		Entry parent_5 = null;
		Entry parent_27 = obj.root;
		Entry right_26 = null;
		Entry right_300 = right_4;
		Entry left_3 = null;
		Entry left_25 = null;
		obj.size = 2;
		boolean color_6 = true;
		int key = 0;
		int key_23 = -1;
		int key_1 = -2;
		int key_301 = -2;
		int key_302 = -1;
		boolean color_28 = false;
		int key_299 = -2;
		obj.modCount = 0;
		Object value_2 = null;
		Object value_24 = null;
		obj.root.key = key_1;
		obj.root.value = value_2;
		obj.root.left = left_3;
		obj.root.right = right_4;
		obj.root.parent = parent_5;
		obj.root.color = color_6;
		right_4.key = key_23;
		right_4.value = value_24;
		right_4.left = left_25;
		right_4.right = right_26;
		right_4.parent = parent_27;
		right_4.color = color_28;
		obj.remove(key);
	}

}

